//
//export PATH="$PATH:$(go env GOPATH)/bin"
//protoc --go_out=. --go_opt=paths=source_relative \
//--go-grpc_out=. --go-grpc_opt=require_unimplemented_servers=false,paths=source_relative \
//api/nmon.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: api/nmon.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppDest_Type int32

const (
	AppDest_HTTP  AppDest_Type = 0
	AppDest_HTTPS AppDest_Type = 1
	AppDest_GRPC  AppDest_Type = 2
)

// Enum value maps for AppDest_Type.
var (
	AppDest_Type_name = map[int32]string{
		0: "HTTP",
		1: "HTTPS",
		2: "GRPC",
	}
	AppDest_Type_value = map[string]int32{
		"HTTP":  0,
		"HTTPS": 1,
		"GRPC":  2,
	}
)

func (x AppDest_Type) Enum() *AppDest_Type {
	p := new(AppDest_Type)
	*p = x
	return p
}

func (x AppDest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppDest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_nmon_proto_enumTypes[0].Descriptor()
}

func (AppDest_Type) Type() protoreflect.EnumType {
	return &file_api_nmon_proto_enumTypes[0]
}

func (x AppDest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppDest_Type.Descriptor instead.
func (AppDest_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_nmon_proto_rawDescGZIP(), []int{8, 0}
}

type ClientStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfMonObjects int32 `protobuf:"varint,1,opt,name=numberOfMonObjects,proto3" json:"numberOfMonObjects,omitempty"`
}

func (x *ClientStat) Reset() {
	*x = ClientStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nmon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStat) ProtoMessage() {}

func (x *ClientStat) ProtoReflect() protoreflect.Message {
	mi := &file_api_nmon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStat.ProtoReflect.Descriptor instead.
func (*ClientStat) Descriptor() ([]byte, []int) {
	return file_api_nmon_proto_rawDescGZIP(), []int{0}
}

func (x *ClientStat) GetNumberOfMonObjects() int32 {
	if x != nil {
		return x.NumberOfMonObjects
	}
	return 0
}

type PingStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Rtt         int32  `protobuf:"varint,2,opt,name=rtt,proto3" json:"rtt,omitempty"`
}

func (x *PingStat) Reset() {
	*x = PingStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nmon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingStat) ProtoMessage() {}

func (x *PingStat) ProtoReflect() protoreflect.Message {
	mi := &file_api_nmon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingStat.ProtoReflect.Descriptor instead.
func (*PingStat) Descriptor() ([]byte, []int) {
	return file_api_nmon_proto_rawDescGZIP(), []int{1}
}

func (x *PingStat) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *PingStat) GetRtt() int32 {
	if x != nil {
		return x.Rtt
	}
	return 0
}

type ResolveStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Rtt         int32  `protobuf:"varint,2,opt,name=rtt,proto3" json:"rtt,omitempty"`
	Resolvedip  string `protobuf:"bytes,3,opt,name=resolvedip,proto3" json:"resolvedip,omitempty"`
	Resolver    string `protobuf:"bytes,4,opt,name=resolver,proto3" json:"resolver,omitempty"`
}

func (x *ResolveStat) Reset() {
	*x = ResolveStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nmon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveStat) ProtoMessage() {}

func (x *ResolveStat) ProtoReflect() protoreflect.Message {
	mi := &file_api_nmon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveStat.ProtoReflect.Descriptor instead.
func (*ResolveStat) Descriptor() ([]byte, []int) {
	return file_api_nmon_proto_rawDescGZIP(), []int{2}
}

func (x *ResolveStat) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *ResolveStat) GetRtt() int32 {
	if x != nil {
		return x.Rtt
	}
	return 0
}

func (x *ResolveStat) GetResolvedip() string {
	if x != nil {
		return x.Resolvedip
	}
	return ""
}

func (x *ResolveStat) GetResolver() string {
	if x != nil {
		return x.Resolver
	}
	return ""
}

type TraceStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	HopIP       string `protobuf:"bytes,2,opt,name=hopIP,proto3" json:"hopIP,omitempty"`
	HopTTL      int32  `protobuf:"varint,3,opt,name=hopTTL,proto3" json:"hopTTL,omitempty"`
	HopRTT      int32  `protobuf:"varint,4,opt,name=hopRTT,proto3" json:"hopRTT,omitempty"`
}

func (x *TraceStat) Reset() {
	*x = TraceStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nmon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceStat) ProtoMessage() {}

func (x *TraceStat) ProtoReflect() protoreflect.Message {
	mi := &file_api_nmon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceStat.ProtoReflect.Descriptor instead.
func (*TraceStat) Descriptor() ([]byte, []int) {
	return file_api_nmon_proto_rawDescGZIP(), []int{3}
}

func (x *TraceStat) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *TraceStat) GetHopIP() string {
	if x != nil {
		return x.HopIP
	}
	return ""
}

func (x *TraceStat) GetHopTTL() int32 {
	if x != nil {
		return x.HopTTL
	}
	return 0
}

func (x *TraceStat) GetHopRTT() int32 {
	if x != nil {
		return x.HopRTT
	}
	return 0
}

type StatsObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client    *Client `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	Timestamp int64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //timestamp of the stat
	// Types that are assignable to Object:
	//	*StatsObject_Clientstat
	//	*StatsObject_Pingstat
	//	*StatsObject_Resolvestat
	//	*StatsObject_Tracestat
	Object isStatsObject_Object `protobuf_oneof:"Object"`
}

func (x *StatsObject) Reset() {
	*x = StatsObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nmon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsObject) ProtoMessage() {}

func (x *StatsObject) ProtoReflect() protoreflect.Message {
	mi := &file_api_nmon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsObject.ProtoReflect.Descriptor instead.
func (*StatsObject) Descriptor() ([]byte, []int) {
	return file_api_nmon_proto_rawDescGZIP(), []int{4}
}

func (x *StatsObject) GetClient() *Client {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *StatsObject) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (m *StatsObject) GetObject() isStatsObject_Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (x *StatsObject) GetClientstat() *ClientStat {
	if x, ok := x.GetObject().(*StatsObject_Clientstat); ok {
		return x.Clientstat
	}
	return nil
}

func (x *StatsObject) GetPingstat() *PingStat {
	if x, ok := x.GetObject().(*StatsObject_Pingstat); ok {
		return x.Pingstat
	}
	return nil
}

func (x *StatsObject) GetResolvestat() *ResolveStat {
	if x, ok := x.GetObject().(*StatsObject_Resolvestat); ok {
		return x.Resolvestat
	}
	return nil
}

func (x *StatsObject) GetTracestat() *TraceStat {
	if x, ok := x.GetObject().(*StatsObject_Tracestat); ok {
		return x.Tracestat
	}
	return nil
}

type isStatsObject_Object interface {
	isStatsObject_Object()
}

type StatsObject_Clientstat struct {
	Clientstat *ClientStat `protobuf:"bytes,3,opt,name=clientstat,proto3,oneof"`
}

type StatsObject_Pingstat struct {
	Pingstat *PingStat `protobuf:"bytes,4,opt,name=pingstat,proto3,oneof"`
}

type StatsObject_Resolvestat struct {
	Resolvestat *ResolveStat `protobuf:"bytes,5,opt,name=resolvestat,proto3,oneof"`
}

type StatsObject_Tracestat struct {
	Tracestat *TraceStat `protobuf:"bytes,6,opt,name=tracestat,proto3,oneof"`
}

func (*StatsObject_Clientstat) isStatsObject_Object() {}

func (*StatsObject_Pingstat) isStatsObject_Object() {}

func (*StatsObject_Resolvestat) isStatsObject_Object() {}

func (*StatsObject_Tracestat) isStatsObject_Object() {}

type PingDest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination string            `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`                                                                               //Destination, www.nmon.com, 127.0.0.1 e.t.c
	Updatetime  int32             `protobuf:"varint,2,opt,name=updatetime,proto3" json:"updatetime,omitempty"`                                                                                //Time of the creation or update time.
	Timeout     int32             `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`                                                                                      //Max run time in nano seconds allowed for that monitoring object.
	Interval    int32             `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`                                                                                    //Probe interval in micro seconds
	PacketSize  int32             `protobuf:"varint,5,opt,name=packetSize,proto3" json:"packetSize,omitempty"`                                                                                //Packet size to be used by probe
	Ttl         int32             `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`                                                                                              //TTL of the ip packet
	Groups      map[string]string `protobuf:"bytes,7,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //Member groups
}

func (x *PingDest) Reset() {
	*x = PingDest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nmon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingDest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingDest) ProtoMessage() {}

func (x *PingDest) ProtoReflect() protoreflect.Message {
	mi := &file_api_nmon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingDest.ProtoReflect.Descriptor instead.
func (*PingDest) Descriptor() ([]byte, []int) {
	return file_api_nmon_proto_rawDescGZIP(), []int{5}
}

func (x *PingDest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *PingDest) GetUpdatetime() int32 {
	if x != nil {
		return x.Updatetime
	}
	return 0
}

func (x *PingDest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *PingDest) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *PingDest) GetPacketSize() int32 {
	if x != nil {
		return x.PacketSize
	}
	return 0
}

func (x *PingDest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *PingDest) GetGroups() map[string]string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type TraceDest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination string            `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`                                                                               //Destination, www.nmon.com, 127.0.0.1 e.t.c
	Updatetime  int32             `protobuf:"varint,2,opt,name=updatetime,proto3" json:"updatetime,omitempty"`                                                                                //Time of the creation or update time.
	Timeout     int32             `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`                                                                                      //Max run time in nano seconds allowed for that monitoring object.
	Interval    int32             `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`                                                                                    //Probe interval in micro seconds
	PacketSize  int32             `protobuf:"varint,5,opt,name=packetSize,proto3" json:"packetSize,omitempty"`                                                                                //Packet size to be used by probe
	Ttl         int32             `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`                                                                                              //TTL of the ip packet
	Groups      map[string]string `protobuf:"bytes,7,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //Member groups
}

func (x *TraceDest) Reset() {
	*x = TraceDest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nmon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceDest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceDest) ProtoMessage() {}

func (x *TraceDest) ProtoReflect() protoreflect.Message {
	mi := &file_api_nmon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceDest.ProtoReflect.Descriptor instead.
func (*TraceDest) Descriptor() ([]byte, []int) {
	return file_api_nmon_proto_rawDescGZIP(), []int{6}
}

func (x *TraceDest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *TraceDest) GetUpdatetime() int32 {
	if x != nil {
		return x.Updatetime
	}
	return 0
}

func (x *TraceDest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TraceDest) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *TraceDest) GetPacketSize() int32 {
	if x != nil {
		return x.PacketSize
	}
	return 0
}

func (x *TraceDest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *TraceDest) GetGroups() map[string]string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type ResolveDest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination   string            `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`                                                                               //Destination, www.nmon.com
	Updatetime    int32             `protobuf:"varint,2,opt,name=updatetime,proto3" json:"updatetime,omitempty"`                                                                                //Time of the creation or update time.
	Timeout       int32             `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`                                                                                      //Max run time in nano allowed for that monitoring object.
	ResolveServer string            `protobuf:"bytes,4,opt,name=resolveServer,proto3" json:"resolveServer,omitempty"`                                                                           //DNS Server to be used, 8.8.8.8 e.t.c
	Interval      int32             `protobuf:"varint,5,opt,name=interval,proto3" json:"interval,omitempty"`                                                                                    //Probe interval in micro seconds
	Groups        map[string]string `protobuf:"bytes,6,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //Member groups
}

func (x *ResolveDest) Reset() {
	*x = ResolveDest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nmon_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveDest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveDest) ProtoMessage() {}

func (x *ResolveDest) ProtoReflect() protoreflect.Message {
	mi := &file_api_nmon_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveDest.ProtoReflect.Descriptor instead.
func (*ResolveDest) Descriptor() ([]byte, []int) {
	return file_api_nmon_proto_rawDescGZIP(), []int{7}
}

func (x *ResolveDest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *ResolveDest) GetUpdatetime() int32 {
	if x != nil {
		return x.Updatetime
	}
	return 0
}

func (x *ResolveDest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ResolveDest) GetResolveServer() string {
	if x != nil {
		return x.ResolveServer
	}
	return ""
}

func (x *ResolveDest) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *ResolveDest) GetGroups() map[string]string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type AppDest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination string            `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"` //Destination, www.nmon.com, 127.0.0.1
	Updatetime  int32             `protobuf:"varint,2,opt,name=updatetime,proto3" json:"updatetime,omitempty"`  //Time of the creation or update time.
	Timeout     int32             `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`        //Max run time in seconds allowed for that monitoring object.
	Type        AppDest_Type      `protobuf:"varint,4,opt,name=type,proto3,enum=api.AppDest_Type" json:"type,omitempty"`
	Interval    int32             `protobuf:"varint,5,opt,name=interval,proto3" json:"interval,omitempty"`                                                                                    //Prove interval in micro seconds
	Groups      map[string]string `protobuf:"bytes,6,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //Member groups
}

func (x *AppDest) Reset() {
	*x = AppDest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nmon_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppDest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppDest) ProtoMessage() {}

func (x *AppDest) ProtoReflect() protoreflect.Message {
	mi := &file_api_nmon_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppDest.ProtoReflect.Descriptor instead.
func (*AppDest) Descriptor() ([]byte, []int) {
	return file_api_nmon_proto_rawDescGZIP(), []int{8}
}

func (x *AppDest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *AppDest) GetUpdatetime() int32 {
	if x != nil {
		return x.Updatetime
	}
	return 0
}

func (x *AppDest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *AppDest) GetType() AppDest_Type {
	if x != nil {
		return x.Type
	}
	return AppDest_HTTP
}

func (x *AppDest) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *AppDest) GetGroups() map[string]string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type MonitoringObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updatetime int64 `protobuf:"varint,1,opt,name=updatetime,proto3" json:"updatetime,omitempty"` //Time of the creation or update time.
	// Types that are assignable to Object:
	//	*MonitoringObject_Pingdest
	//	*MonitoringObject_Tracedest
	//	*MonitoringObject_Resolvedest
	//	*MonitoringObject_Appdest
	Object isMonitoringObject_Object `protobuf_oneof:"Object"`
}

func (x *MonitoringObject) Reset() {
	*x = MonitoringObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nmon_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitoringObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringObject) ProtoMessage() {}

func (x *MonitoringObject) ProtoReflect() protoreflect.Message {
	mi := &file_api_nmon_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoringObject.ProtoReflect.Descriptor instead.
func (*MonitoringObject) Descriptor() ([]byte, []int) {
	return file_api_nmon_proto_rawDescGZIP(), []int{9}
}

func (x *MonitoringObject) GetUpdatetime() int64 {
	if x != nil {
		return x.Updatetime
	}
	return 0
}

func (m *MonitoringObject) GetObject() isMonitoringObject_Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (x *MonitoringObject) GetPingdest() *PingDest {
	if x, ok := x.GetObject().(*MonitoringObject_Pingdest); ok {
		return x.Pingdest
	}
	return nil
}

func (x *MonitoringObject) GetTracedest() *TraceDest {
	if x, ok := x.GetObject().(*MonitoringObject_Tracedest); ok {
		return x.Tracedest
	}
	return nil
}

func (x *MonitoringObject) GetResolvedest() *ResolveDest {
	if x, ok := x.GetObject().(*MonitoringObject_Resolvedest); ok {
		return x.Resolvedest
	}
	return nil
}

func (x *MonitoringObject) GetAppdest() *AppDest {
	if x, ok := x.GetObject().(*MonitoringObject_Appdest); ok {
		return x.Appdest
	}
	return nil
}

type isMonitoringObject_Object interface {
	isMonitoringObject_Object()
}

type MonitoringObject_Pingdest struct {
	Pingdest *PingDest `protobuf:"bytes,2,opt,name=pingdest,proto3,oneof"`
}

type MonitoringObject_Tracedest struct {
	Tracedest *TraceDest `protobuf:"bytes,3,opt,name=tracedest,proto3,oneof"`
}

type MonitoringObject_Resolvedest struct {
	Resolvedest *ResolveDest `protobuf:"bytes,4,opt,name=resolvedest,proto3,oneof"`
}

type MonitoringObject_Appdest struct {
	Appdest *AppDest `protobuf:"bytes,5,opt,name=appdest,proto3,oneof"`
}

func (*MonitoringObject_Pingdest) isMonitoringObject_Object() {}

func (*MonitoringObject_Tracedest) isMonitoringObject_Object() {}

func (*MonitoringObject_Resolvedest) isMonitoringObject_Object() {}

func (*MonitoringObject_Appdest) isMonitoringObject_Object() {}

//Client information to be used while registering configuration or statistic server
type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                 //Uniq id representing the client. It should be uniuqe during client reboots and between clients.
	Name           string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                             //Name of client. Must be unique.
	Groups         map[string]string `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //Member groups
	AddAsPingDest  bool              `protobuf:"varint,4,opt,name=addAsPingDest,proto3" json:"addAsPingDest,omitempty"`                                                                          //Willing to be monitored as pingDest. If true this client will monitored by its group members.
	AddAsTraceDest bool              `protobuf:"varint,5,opt,name=addAsTraceDest,proto3" json:"addAsTraceDest,omitempty"`                                                                        //Willing to be monitores as TraceDest. If true this client will monitored by its group members.
	AddAsAppDest   bool              `protobuf:"varint,6,opt,name=addAsAppDest,proto3" json:"addAsAppDest,omitempty"`                                                                            //Willing to be monitores as TraceDest. If true this client will monitored by its group members.
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nmon_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_api_nmon_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_api_nmon_proto_rawDescGZIP(), []int{10}
}

func (x *Client) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Client) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Client) GetGroups() map[string]string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Client) GetAddAsPingDest() bool {
	if x != nil {
		return x.AddAsPingDest
	}
	return false
}

func (x *Client) GetAddAsTraceDest() bool {
	if x != nil {
		return x.AddAsTraceDest
	}
	return false
}

func (x *Client) GetAddAsAppDest() bool {
	if x != nil {
		return x.AddAsAppDest
	}
	return false
}

//Connect message used while registering the servers.
type Connect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client *Client `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *Connect) Reset() {
	*x = Connect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nmon_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connect) ProtoMessage() {}

func (x *Connect) ProtoReflect() protoreflect.Message {
	mi := &file_api_nmon_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connect.ProtoReflect.Descriptor instead.
func (*Connect) Descriptor() ([]byte, []int) {
	return file_api_nmon_proto_rawDescGZIP(), []int{11}
}

func (x *Connect) GetClient() *Client {
	if x != nil {
		return x.Client
	}
	return nil
}

// EchoRequest is the request for echo.
type EchoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *EchoRequest) Reset() {
	*x = EchoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nmon_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoRequest) ProtoMessage() {}

func (x *EchoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_nmon_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoRequest.ProtoReflect.Descriptor instead.
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return file_api_nmon_proto_rawDescGZIP(), []int{12}
}

func (x *EchoRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// EchoResponse is the response for echo.
type EchoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *EchoResponse) Reset() {
	*x = EchoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nmon_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoResponse) ProtoMessage() {}

func (x *EchoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_nmon_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoResponse.ProtoReflect.Descriptor instead.
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return file_api_nmon_proto_rawDescGZIP(), []int{13}
}

func (x *EchoResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Close - empty close message.
type Close struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Close) Reset() {
	*x = Close{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nmon_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Close) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Close) ProtoMessage() {}

func (x *Close) ProtoReflect() protoreflect.Message {
	mi := &file_api_nmon_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Close.ProtoReflect.Descriptor instead.
func (*Close) Descriptor() ([]byte, []int) {
	return file_api_nmon_proto_rawDescGZIP(), []int{14}
}

var File_api_nmon_proto protoreflect.FileDescriptor

var file_api_nmon_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0x3c, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4d,
	0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x22, 0x3e, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x74, 0x74, 0x22, 0x7d, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x74, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x22, 0x73, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x70, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x68, 0x6f, 0x70, 0x49, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x70, 0x54, 0x54,
	0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x6f, 0x70, 0x54, 0x54, 0x4c, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x6f, 0x70, 0x52, 0x54, 0x54, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x6f, 0x70, 0x52, 0x54, 0x54, 0x22, 0xa0, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x74, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x74, 0x61, 0x74, 0x12, 0x2b, 0x0a,
	0x08, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x61, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x74, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x12, 0x2e, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x74, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xa2, 0x02, 0x0a, 0x08, 0x50,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74,
	0x6c, 0x12, 0x31, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x74,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xa4, 0x02, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9c, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x44, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x44, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbc, 0x02, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x44, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x25, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x30, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x65, 0x73, 0x74, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x25, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x52,
	0x50, 0x43, 0x10, 0x02, 0x22, 0xf9, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x69, 0x6e,
	0x67, 0x64, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x69,
	0x6e, 0x67, 0x64, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x64,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x64, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07,
	0x61, 0x70, 0x70, 0x64, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x64, 0x65, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0x8a, 0x02, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x41, 0x73, 0x50, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x41, 0x73, 0x50, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x41, 0x73, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x61, 0x64, 0x64, 0x41, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x41, 0x73, 0x41, 0x70, 0x70, 0x44, 0x65, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x41, 0x73, 0x41, 0x70, 0x70, 0x44, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x2b, 0x0a,
	0x0b, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2c, 0x0a, 0x0c, 0x45, 0x63,
	0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x07, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x32, 0x46, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x63,
	0x68, 0x6f, 0x12, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x45, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x30, 0x01,
	0x32, 0x36, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x0a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x28, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x6e, 0x6d, 0x6f, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_nmon_proto_rawDescOnce sync.Once
	file_api_nmon_proto_rawDescData = file_api_nmon_proto_rawDesc
)

func file_api_nmon_proto_rawDescGZIP() []byte {
	file_api_nmon_proto_rawDescOnce.Do(func() {
		file_api_nmon_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_nmon_proto_rawDescData)
	})
	return file_api_nmon_proto_rawDescData
}

var file_api_nmon_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_nmon_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_api_nmon_proto_goTypes = []interface{}{
	(AppDest_Type)(0),        // 0: api.AppDest.Type
	(*ClientStat)(nil),       // 1: api.ClientStat
	(*PingStat)(nil),         // 2: api.PingStat
	(*ResolveStat)(nil),      // 3: api.ResolveStat
	(*TraceStat)(nil),        // 4: api.TraceStat
	(*StatsObject)(nil),      // 5: api.StatsObject
	(*PingDest)(nil),         // 6: api.PingDest
	(*TraceDest)(nil),        // 7: api.TraceDest
	(*ResolveDest)(nil),      // 8: api.ResolveDest
	(*AppDest)(nil),          // 9: api.AppDest
	(*MonitoringObject)(nil), // 10: api.MonitoringObject
	(*Client)(nil),           // 11: api.Client
	(*Connect)(nil),          // 12: api.Connect
	(*EchoRequest)(nil),      // 13: api.EchoRequest
	(*EchoResponse)(nil),     // 14: api.EchoResponse
	(*Close)(nil),            // 15: api.Close
	nil,                      // 16: api.PingDest.GroupsEntry
	nil,                      // 17: api.TraceDest.GroupsEntry
	nil,                      // 18: api.ResolveDest.GroupsEntry
	nil,                      // 19: api.AppDest.GroupsEntry
	nil,                      // 20: api.Client.GroupsEntry
}
var file_api_nmon_proto_depIdxs = []int32{
	11, // 0: api.StatsObject.client:type_name -> api.Client
	1,  // 1: api.StatsObject.clientstat:type_name -> api.ClientStat
	2,  // 2: api.StatsObject.pingstat:type_name -> api.PingStat
	3,  // 3: api.StatsObject.resolvestat:type_name -> api.ResolveStat
	4,  // 4: api.StatsObject.tracestat:type_name -> api.TraceStat
	16, // 5: api.PingDest.groups:type_name -> api.PingDest.GroupsEntry
	17, // 6: api.TraceDest.groups:type_name -> api.TraceDest.GroupsEntry
	18, // 7: api.ResolveDest.groups:type_name -> api.ResolveDest.GroupsEntry
	0,  // 8: api.AppDest.type:type_name -> api.AppDest.Type
	19, // 9: api.AppDest.groups:type_name -> api.AppDest.GroupsEntry
	6,  // 10: api.MonitoringObject.pingdest:type_name -> api.PingDest
	7,  // 11: api.MonitoringObject.tracedest:type_name -> api.TraceDest
	8,  // 12: api.MonitoringObject.resolvedest:type_name -> api.ResolveDest
	9,  // 13: api.MonitoringObject.appdest:type_name -> api.AppDest
	20, // 14: api.Client.groups:type_name -> api.Client.GroupsEntry
	11, // 15: api.Connect.client:type_name -> api.Client
	13, // 16: api.MonitoringClient.UnaryEcho:input_type -> api.EchoRequest
	12, // 17: api.ConfigServer.CreateStream:input_type -> api.Connect
	5,  // 18: api.Stats.RecordStats:input_type -> api.StatsObject
	14, // 19: api.MonitoringClient.UnaryEcho:output_type -> api.EchoResponse
	10, // 20: api.ConfigServer.CreateStream:output_type -> api.MonitoringObject
	15, // 21: api.Stats.RecordStats:output_type -> api.Close
	19, // [19:22] is the sub-list for method output_type
	16, // [16:19] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_api_nmon_proto_init() }
func file_api_nmon_proto_init() {
	if File_api_nmon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_nmon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nmon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nmon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nmon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nmon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nmon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingDest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nmon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceDest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nmon_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveDest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nmon_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppDest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nmon_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitoringObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nmon_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nmon_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nmon_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nmon_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nmon_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Close); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_nmon_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*StatsObject_Clientstat)(nil),
		(*StatsObject_Pingstat)(nil),
		(*StatsObject_Resolvestat)(nil),
		(*StatsObject_Tracestat)(nil),
	}
	file_api_nmon_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*MonitoringObject_Pingdest)(nil),
		(*MonitoringObject_Tracedest)(nil),
		(*MonitoringObject_Resolvedest)(nil),
		(*MonitoringObject_Appdest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_nmon_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_api_nmon_proto_goTypes,
		DependencyIndexes: file_api_nmon_proto_depIdxs,
		EnumInfos:         file_api_nmon_proto_enumTypes,
		MessageInfos:      file_api_nmon_proto_msgTypes,
	}.Build()
	File_api_nmon_proto = out.File
	file_api_nmon_proto_rawDesc = nil
	file_api_nmon_proto_goTypes = nil
	file_api_nmon_proto_depIdxs = nil
}
